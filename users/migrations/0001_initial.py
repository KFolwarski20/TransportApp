# Generated by Django 5.1.6 on 2025-03-05 22:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Ciezarowka',
            fields=[
                ('ciez_id', models.AutoField(primary_key=True, serialize=False)),
                ('ciez_marka', models.CharField(max_length=50, verbose_name='Marka')),
                ('ciez_model', models.CharField(max_length=50, verbose_name='Model')),
                ('ciez_moc', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='Moc nie może być ujemna.')], verbose_name='Moc (KM)')),
                ('ciez_nr_rejestr', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Podaj poprawny numer rejestracyjny.', regex='^[A-Z0-9]{2,3}\\s?[A-Z0-9]{4,6}$')], verbose_name='Numer rejestracyjny')),
                ('ciez_przebieg', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='Przebieg nie może być ujemny.')], verbose_name='Przebieg (km)')),
                ('ciez_rok_prod', models.IntegerField(validators=[django.core.validators.MinValueValidator(0, message='Rok produkcji nie może być mniejszy od 0.'), django.core.validators.MaxValueValidator(2025, message='Rok produkcji nie może być większy niż 2025.')], verbose_name='Rok produkcji')),
                ('ciez_data_zakupu', models.DateField(verbose_name='Data zakupu')),
                ('ciez_data_serwisu', models.DateField(verbose_name='Data ostatniego serwisu')),
                ('ciez_masa_wlasna', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0.01, message='Masa własna musi być większa od 0.')], verbose_name='Masa własna (t)')),
                ('ciez_masa_ladunku', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0.01, message='Masa ładunku musi być większa od 0.')], verbose_name='Masa ładunku (t)')),
                ('ciez_dop_masa_calk', models.DecimalField(decimal_places=2, max_digits=7, validators=[django.core.validators.MinValueValidator(0.01, message='Dopuszczalna masa całkowita musi być większa od 0.')], verbose_name='Dopuszczalna masa całkowita (t)')),
                ('ciez_spalanie_na_100km', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0, message='Spalanie nie może być mniejsze niż 0.')], verbose_name='Spalanie na 100 km (l)')),
            ],
        ),
        migrations.CreateModel(
            name='Kierowca',
            fields=[
                ('kier_id', models.AutoField(primary_key=True, serialize=False)),
                ('kier_imie', models.CharField(max_length=100, verbose_name='Imię')),
                ('kier_nazwisko', models.CharField(max_length=100, verbose_name='Nazwisko')),
                ('data_urodzenia', models.DateField(verbose_name='Data urodzenia')),
                ('kier_adres', models.TextField(verbose_name='Adres')),
                ('kier_telefon', models.CharField(max_length=15, verbose_name='Telefon')),
                ('kier_email', models.EmailField(max_length=254, verbose_name='Email')),
                ('kier_lata_dosw', models.IntegerField(verbose_name='Lata doświadczenia')),
                ('kier_przejech_km', models.IntegerField(verbose_name='Przejechane km')),
                ('kier_liczba_wykroczen', models.IntegerField(verbose_name='Liczba wykroczeń')),
                ('stawka_za_km', models.DecimalField(decimal_places=2, default=1.5, max_digits=6, verbose_name='Stawka za km (PLN)')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Zlecenie',
            fields=[
                ('id_zlec', models.AutoField(primary_key=True, serialize=False)),
                ('miejsce_odb', models.CharField(max_length=255, verbose_name='Miejsce odbioru')),
                ('miejsce_dost', models.CharField(max_length=255, verbose_name='Miejsce dostawy')),
                ('przychod', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Przychód (PLN)')),
                ('ilosc_ladunku', models.FloatField(verbose_name='Ilość ładunku (tony)')),
                ('towar', models.CharField(max_length=255, verbose_name='Rodzaj towaru')),
                ('data_otrzymania', models.DateField(verbose_name='Data otrzymania zlecenia')),
                ('termin_realizacji', models.DateField(verbose_name='Termin realizacji')),
                ('status', models.CharField(choices=[('nie_rozpoczete', 'Nie rozpoczęte'), ('w_realizacji', 'W realizacji'), ('zamkniete', 'Zamknięte')], default='nie_rozpoczete', max_length=15, verbose_name='Status zlecenia')),
                ('odleglosc_km', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('przewidywana_data_rozpoczecia', models.DateTimeField(blank=True, null=True)),
                ('przewidywany_czas_realizacji', models.DurationField(blank=True, null=True)),
                ('przewidywana_data_zakonczenia', models.DateTimeField(blank=True, null=True)),
                ('rzeczywista_data_rozpoczecia', models.DateTimeField(blank=True, null=True, verbose_name='Rzeczywista data rozpoczęcia')),
                ('rzeczywista_data_zakonczenia', models.DateTimeField(blank=True, null=True, verbose_name='Rzeczywista data zakończenia')),
                ('rzeczywiste_przejechane_km', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Rzeczywiste przejechane km')),
                ('rzeczywiste_spalone_litry', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Rzeczywiste spalone litry paliwa')),
                ('ciezarowka', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.ciezarowka', verbose_name='Przypisana ciężarówka')),
                ('kierowca', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.kierowca', verbose_name='Przypisany kierowca')),
            ],
        ),
    ]
